services:
  nginx:
    build:
      context: ./apps/front
      dockerfile: Dockerfile.prod
    container_name: nginx
    environment:
      - PRERENDER_TOKEN=${PRERENDER_TOKEN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - letsencrypt:/etc/letsencrypt
    depends_on:
      - back
    restart: always

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - letsencrypt:/etc/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: >
      sh -c "trap exit TERM;
             while :; do
               certbot renew --quiet --deploy-hook 'docker exec nginx nginx -s reload';
               sleep 12h;
             done"
    restart: always

  back:
    build:
      context: ./apps/back
      dockerfile: Dockerfile.prod
    env_file: .env
    environment:
      - NODE_ENV=production
      - PG_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    volumes:
      - logs-data:/app/logs
    expose:
      - "3000"
    depends_on:
      db:
        condition: service_healthy
    restart: always

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  pgdata:
  logs-data:
  letsencrypt:
    name: letsencrypt
